package com.smorzhok.multiagent.sarl

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.util.Scopes

import com.smorzhok.multiagent.common.StatisticsMessageContent
import com.smorzhok.multiagent.common.entity.CountryParam
import com.smorzhok.multiagent.common.entity.ModelParam
import com.smorzhok.multiagent.common.model.TouristType

import java.util.ArrayList
import java.util.Random

agent OperatorAgent {
	uses DefaultContextInteractions, Lifecycle, Logging
	
	val RANDOM : Random = new Random()
	val DURATIONS = #[7, 10, 14, 21]
	var modelParam : ModelParam
	
	on Initialize {
		val args = occurrence.parameters
		if (args != null && args.length == 1) {
			modelParam = args.get(0) as ModelParam
		} else {
        	println("Wrong args: " + args)
            killMe
		}
	}
	
	on TourRequest {
		var type = occurrence.type
		var averageTourPricePerDay = modelParam.getAveragePricePerDay()
		var touristType = TouristType.fromString(type)
		var countryParam = chooseCountry(averageTourPricePerDay, touristType)
		if (countryParam != null) {
			var country = countryParam.getCountry().getName()
            var duration = DURATIONS.get(RANDOM.nextInt(DURATIONS.size))
            var price = calculatePrice(countryParam, duration, touristType)
            var content = new StatisticsMessageContent(price, country, duration, countryParam.getAttractivenessCoefficient())
            emit(
		    	new TourOffer(content),
		    	Scopes.addresses( occurrence.source )
		    )
		}
	}
	
	def chooseCountry(averageTourPricePerDay : double, touristType : TouristType) : CountryParam {
		var upperBound : Double
        var bottomBound : Double
        switch touristType {
        	case TouristType.BUDGET: upperBound = averageTourPricePerDay
        	case TouristType.REGULAR: { }
        	case TouristType.LUXURY: bottomBound = averageTourPricePerDay * 1.3
        	default : println("TouristType " + touristType.getName() + " is not supported")
        }
        var countryParams = new ArrayList()
        if (upperBound != null || bottomBound != null) {
            for (param : modelParam.getCountryParams()) {
                if (upperBound != null) {
                    if (param.getAveragePricePerDay() <= upperBound) {
                        countryParams += param
                    }
                } else if (param.getAveragePricePerDay() >= bottomBound) {
                     countryParams += param
                }
            }
        } else {
            countryParams += modelParam.getCountryParams()
        }
        var empty = countryParams.isNullOrEmpty()
        if (empty) {
        	return null
        }
        return countryParams.get(RANDOM.nextInt(countryParams.size))
	}
	
	def calculatePrice(countryParam : CountryParam, duration : int, touristType : TouristType ) : double {
        var averagePerDay = countryParam.getAveragePricePerDay()
        var price = averagePerDay * duration
        var coefficient = RANDOM.nextDouble()
        var specialPrice = RANDOM.nextDouble() < 0.05
        if (!specialPrice) {
            if (TouristType.BUDGET == touristType) {
                if (coefficient > 0.2) {
                    coefficient = 0.2
                }
            } else if (TouristType.REGULAR == touristType) {
                if (coefficient > 0.4) {
                    coefficient = 0.4
                }
            }
        } else {
            if (coefficient < 0.8) {
                coefficient = 0.8
            }
        }
        if (specialPrice) {
        	return price * coefficient
        }
        return price / coefficient
    }
    
    on KillEvent {
    	killMe
    }
     
}