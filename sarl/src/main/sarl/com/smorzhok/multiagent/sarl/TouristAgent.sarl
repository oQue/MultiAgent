package com.smorzhok.multiagent.sarl

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.Random
import io.sarl.core.Logging
import io.sarl.core.Behaviors
import io.sarl.core.Schedules

agent TouristAgent {
	uses DefaultContextInteractions, Lifecycle, Logging, Behaviors, Schedules
	
	val MONTH_PERIOD : int = 5 * 1000
	val VACATION_PERIOD : int = 10 * 1000
	val HOLIDAY_PER_MONTH : double = 2.33
	val SHORTEST_VACATION : int = 7
	val RANDOM : Random = new Random()
	
	var type : String
	var operatorsAmount : int
	var income : double
	var balance : double
	var holidayDays : double
	var eurCurrencyRate : double
	
	on Initialize {
		val args = occurrence.parameters
		if (args != null && args.length == 4) {
            operatorsAmount = args.get(0) as Integer
            income = args.get(1) as Double
            type = args.get(2) as String
            eurCurrencyRate = args.get(3) as Double
            balance = income * RANDOM.nextInt(2)
            holidayDays = RANDOM.nextInt(20)
            println("Monthly income: " + income + ". Current balance: " + balance +
                    ". Type: " + type + ". Holiday days: " + holidayDays)
            every(MONTH_PERIOD) [
            	monthPassed
            ]
            every(VACATION_PERIOD) [
            	if (readyForVacation) {
            		startNegotiations
            	}
            ]
        } else {
        	println("Wrong args: " + args)
            killMe
        }
	}
	
	def monthPassed() {
		var coefficient = RANDOM.nextDouble()
        var spentThisMonth = income * coefficient
        if (RANDOM.nextDouble() < 0.3) {
            // once in ~3 months we're spending up to 3 salaries for goodies
            var multiplier = RANDOM.nextInt(4)
            println("Multiplier: " + multiplier)
            if (multiplier > 0) {
                spentThisMonth *= multiplier
            }
        }
        synchronized (this) {
            balance += income - spentThisMonth;
            if (balance < 0) {
                balance = 0
            }
            holidayDays += HOLIDAY_PER_MONTH
        }
        println("Current balance: " + balance)
	}
	
	def readyForVacation() : boolean {
		return holidayDays > SHORTEST_VACATION && balance > income * 3
	}
	
	def startNegotiations() {
		emit(new TourRequest(type))
	}
 }